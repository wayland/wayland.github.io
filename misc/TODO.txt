Wayland's Smithy
----------------

Purpose: Blog, so I can write posts about new features for TOP in Raku, and have them added to the Weekly

Next articles:
-	Note somewhere: My Class loading thingy should probably be called "dynamic binding"; cf. Design Patterns p. 14
	-	Actually, maybe dynamic binding isn't what I think it is.  Keep reading.  
	-	No-one seems to be talking about dynamic binding and polymorphism with Raku (despite the fact that 
		that's what the DBI/DBD pattern is); I probably need to do an article on this
		-	Should also cover Class Inheritance vs. Interface Inheritance (Design Patterns p. 16-18)
-	Clean up tabs?
-	Raku: Pathways of Entry
-	The Philosophy of Raku
	-	This will likely require adding footnotes -- though these should probably be pop-overs
	-	Look at ODT, and try to make my XML move in that direction, so my website will integrate well with ODT output
-	Raku: Your Forever Programming Language
-	Technology
	-	Update Menu Bars here
	-	Can we reduce card margins and use a grid to put the date somewhere useful?
-	The Perfects

Blog Technology:
-	Make menu bars be themed in the site hue (see sites menu)
-	Make the Blog main menu just have a list of article series
-	Make hiding be on the basis of an article, not a series
-	Hide a series if there are no visible articles
-	Series should be ordered by the ones with the most recent articles at the top

Other Technology:
-	Go back and look at restructuring other sites to use the new format stuff

Next articles:
-	Article Series: Reaching Out with Raku
	-	Raku: Your First Programming Language?  (Awaiting Weekly)
	-	Raku: Pathways of Entry (Ready to Publish)
	-	Raku: Your Forever Programming Language?  (Ready to Publish)
	-	Why Pythonistas should learn Raku:
		-	Grab the paragraph about Python from the "Raku-Forever-Language" article, then add:
			"Naturally there will be some whom it <i>does</i> suit, but the best way to find out whether you're one or not is to learn Raku and experience the alternative.
	-	Interesting question: What do different programming languages optimise for?  
-	Article Series: "Raku: Optimised for Fun"
	-	Other articles could be
		-	"Raku: With Eldricht horrors" (Call of Cthulhu classes)
			-	The horrors could be compiler internals, or the horrors of other languages :p
			-	Each of us could be planning our own manor estate
		-	"Raku 2050: Cyberpunk Edition" -- Obviously we're all deckers (datamancers)
-	The Philosophy of Raku
	-	There's More Than One Way To Do It (TMTOWDI) (Larry Wall)
		-	True greatness is measured by how much freedom you give to others, not by how much you can coerce others to do what you want (Larry Wall)
		-	Tim: A zen koan's primary purpose is to confuse you.  We have one of those [virtues], but we also have different approaches to philosophy
	-	The three chief virtues of a programmer are: Laziness, Impatience, and Hubris (Larry Wall)
	-	We all agree on the necessity of compromise. We just can't agree on when it's necessary to compromise. (Larry Wall)
	-	The problem with being consistent is that there are lots of ways to be consistent, and theyâ€™re all inconsistent with each other (Larry Wall)
	-	Raku is Optimised for Fun (-Ofun) (Audrey Tang)

-	The Perfects

Streams:
-	DOP stream
	-       Choose a project to work on as an example of the DOP in Raku stuff; one of 
		-       Event/Community Management (ie. the Jethro replacement) -- this is probably the best go as it's simpler
		-       Human/AI Ticketing system -- this is also a good choice
		-       Finance Engine (ie. backend for things like GnuCash)
	-       Start out just doing stuff with DOP, but will need to rewrite various parts of it for:
		-       Red ORM, once this is integrated with TOP
		-       OTTTER, as this gets created
-	The Perfects (overviews mentioning features):
	-	The Perfect Desk
	-	The Perfect Maximalist Input Setup (keyboards, pointers, etc)
	-	The Perfect HTML Layout Engine (Ploughrowgraph/FlowGrid)
-	4M Stream
-	General Stream
	-       Write up ASV format (see below)
-	Dive into computerstuff.jdarx and goodmessaging, and at least pull out the article content, even if I don't re-release it
	-	Dive into archive.org, and see if they saved any of my content



Publishing process:
-	Copy template
-	Write content
-	Final eyeballs to review
	-	Is pubDate set
-	Commit manual changes
-	Run autogenerator
-	Commit automated changes
-	Git Push
