Wayland's Smithy
----------------

Purpose: Blog, so I can write posts about new features for TOP in Raku, and have them added to the Weekly

Technology:
-	Fix breadcrumbs at https://wayland.github.io/blog/raku/Ofun/Raku-RPG-and-Guild.xml

Next articles:
-	Clean up tabs?
-	Raku: Your Only Programming Language
	-	Update Menu Bars here
-	The Perfects

Blog Technology:
-	Make menu bars be themed in the site hue (see sites menu)
-	Make the Blog main menu just have a list of article series
-	Make hiding be on the basis of an article, not a series
-	Hide a series if there are no visible articles
-	Series should be ordered by the ones with the most recent articles at the top

Other Technology:
-	Go back and look at restructuring other sites to use the new format stuff

Next articles:
-	We've often said that raku should be the last language that people learn, but what if it should be the first?  
	-	Never need to learn another language, because all the functionality is right there. 
	-	Each style of programming could be a separate tutorial, to be approached when you're interested
		-	Imperative Programming in Raku
		-	Functional Programming in Raku
		-	Object-Oriented Programming in Raku
		...
	-	Python has their coders boot camp for learning just enough Python to get started
	-	Getting coders from scratch is probably more productive than grabbing existing coders
	-	For getting existing coders, we really need to speak to a problem they have that isn't straightforward in their language
-	Article Series: "Raku: Optimised for Fun"
	-	Other articles could be
		-	"Raku: With Eldricht horrors" (Call of Cthulhu classes)
			-	The horrors could be compiler internals, or the horrors of other languages :p
			-	Each of us could be planning our own manor estate
		-	"Raku 2050: Cyberpunk Edition" -- Obviously we're all deckers (datamancers)
-	The Perfects

Streams:
-	DOP stream
	-       Choose a project to work on as an example of the DOP in Raku stuff; one of 
		-       Event/Community Management (ie. the Jethro replacement) -- this is probably the best go as it's simpler
		-       Human/AI Ticketing system -- this is also a good choice
		-       Finance Engine (ie. backend for things like GnuCash)
	-       Start out just doing stuff with DOP, but will need to rewrite various parts of it for:
		-       Red ORM, once this is integrated with TOP
		-       OTTTER, as this gets created
-	The Perfects (overviews mentioning features):
	-	The Perfect Desk
	-	The Perfect Maximalist Input Setup (keyboards, pointers, etc)
	-	The Perfect HTML Layout Engine (Ploughrowgraph/FlowGrid)
-	4M Stream
-	General Stream
	-       Write up ASV format (see below)
-	Dive into computerstuff.jdarx and goodmessaging, and at least pull out the article content, even if I don't re-release it
	-	Dive into archive.org, and see if they saved any of my content



Publishing process:
-	Final eyeballs to review
	-	Is pubDate set
-	Commit manual changes
-	Run autogenerator
-	Commit automated changes
-	Git Push
