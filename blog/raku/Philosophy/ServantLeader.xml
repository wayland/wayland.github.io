<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../all-sites/layout.xsl"?>
<page hidden="1">
<title>The Philosophy of Raku: The Crux</title>
<description>An explanation of the philosophy of Raku</description>
<category>Raku, Philosophy</category>
<author name="Tim Nelson"/>
<pubDate>TODO pubDate</pubDate>

<sitedir>blog</sitedir>
<filename>raku/Philosophy/ServantLeader.xml</filename>
<content bibliography="/raku/Philosophy/bibliography.xml">

<h1>The Crux: Maximise Creativity</h1>

<p>This is the first in a series of articles on the Philosophy of Raku.  Well, the second, if we're counting Larry Wall's 1994 <a href="http://www.wall.org/~larry/pm.html">Perl, the first postmodern computer language</a><ref label="Wall,1999"/>.  Speaking of which, he summarised the crux of the Raku (and Perl) philosophy in that article:</p>

<blockquote>
How does [Raku]<footnote>When Raku was first created, it was created as version 6 of Perl.  Eventually it took on enough life of its own to be given the name Raku.  However, sometime around that point, Larry Wall, the creator of Perl, sadly had to withdraw from the community.  I've thus substituted the name "Raku" in instead of Perl, but the sources will say "Perl".  You can tell when I've done this by the [ ] around Raku.  </footnote> put the focus onto the creativity of the programmer? Very simple. [Raku] is humble. It doesn't try to tell the programmer how to program. It lets the programmer decide what rules today, and what sucks. It doesn't have any theoretical axes to grind. And where it has theoretical axes, it doesn't grind them. [Raku] doesn't have any agenda at all, other than to be maximally useful to the maximal number of people. To be the duct tape of the Internet, and of everything else. You've heard the joke, I'm sure. How is duct tape like the Force? It has a light side, and a dark side, and it holds the universe together.<ref label="Wall,1999"/>
<div class="reference">Larry Wall, designer of Perl and Raku</div>
</blockquote>

<p>The core tenet of Raku is that its not just promises about syntax — it’s a <b>commitment to the programmer’s creativity</b>.</p>

<h1>How?  Sensible Complexity Distribution</h1>

<blockquote>
Complexity is intrinsically irreducible…but extrinsically redistributable. [Raku] tries to put the complexity where it will do the least harm, and where its victims may have the best chance of surviving it<ref label="Conway,2019"/>
<div class="reference">Damian Conway</div>
</blockquote>

<p>Larry Wall was the designer of both languages.  Damian Conway worked closely with him during the design of Raku.  Damian's most prominent role was to interpret and explain what Larry had said.  If Larry was J. R. R. Tolkien, Damian was Christopher Tolkien, toiling away humbly so that the rest of us could understand the mentor.  Though with more exegesis and less textual criticism.  </p>

<p>Since Raku was originally to be the next version of Perl, there will obviously be some similarities, though Raku takes the old rallying cry and adds a twist:</p>

<style>
.core-quote-box {
  display: grid;
  grid-template-columns: auto auto auto;
  column-gap: 4pt;
 
  max-width: fit-content;
  margin: 4pt auto;
}
.bigfont {
  font-size: 200%;
  font-weight: 900;
}
.cqe { // Core Quote Element
  max-width: fit-content;
}
.things {
  text-align: right;
}
.value {
  text-align: left;
}
</style>


<div class="parallel-quote">
<blockquote>
<div class="quote-header">Perl</div>
Make the Easy Things Easy, and the Hard Things Possible<ref
  label="Wall,2000"
  pages="4"
/> <footnote>This is likely a paraphrase of Alan Kay's quote <a href="https://www.quora.com/What-is-the-story-behind-Alan-Kay-s-adage-Simple-things-should-be-simple-complex-things-should-be-possible/answer/Alan-Kay-11?ch=10&amp;share=7a78ffce&amp;srid=88EK">Simple things should be simple, complex things should be possible</a>.  </footnote>
<div class="reference">Larry Wall</div>
</blockquote>
<blockquote>
<div class="quote-header">Raku</div>
For Raku, ... we aimed a little higher:<br/>
  <div class="core-quote-box">
    <span class="cqe easy things">Easy things</span> <span class="cqe">should be</span> <span class="cqe">trivial</span>
    <span class="cqe hard things">Hard things</span> <span class="cqe">should be</span> <span class="cqe">easy;</span>
    <span class="cqe impossible things">Impossible things</span> <span class="cqe"><span/>should be</span> <span class="cqe">(merely) hard.<ref label="Conway,2020"/></span>
  </div>
<div class="reference">Damian Conway</div>
</blockquote>
</div>

<callout min-width="fit-content">
  <div class="core-quote-box">
    <span class="cqe easy things">Easy things</span> <span class="cqe">should be</span> <span class="cqe value">trivial</span>
    <span class="cqe hard things">Hard things</span> <span class="cqe">should be</span> <span class="cqe value">easy;</span>
    <span class="cqe impossible things">Impossible things</span> <span class="cqe impossible should">should be</span> <span class="cqe impossible value">(merely) hard.</span>
  </div>
</callout>

<p>This is a three-part statement that explains a lot about Raku.  Let's consider each part in turn.  </p>

<h2>Easy things should be trivial</h2>

<p>There are many contributors to this, but there are two philosophical points worth highlighting here:</p>

<ul>
  <li>Do What I Mean</li>
  <li>There's More Than One Way To Do It, But Some Ways Are More Equal Than Others: A Philosophy of Freedom and Consequences</li>
</ul>

<h3>Do What I Mean</h3>

<p>Language should stay out of the way.  At least when you’re trying to get the easy things done. A good language ought to sit there like a faithful butler, fetching the right cup without quibbling over the brand of tea. If your code wants to say hello, the language shouldn’t demand three scrolls of boilerplate just to cough politely. A well-bred language knows when to speak and when to listen — and above all, when to hush.</p>

<p>Because the truth is, you’re busy enough already. The real work is in your head: shaping the idea, coaxing the logic, smoothing the rough edges of what might happen and what must never happen. You don’t need the syntax arguing with you, or the compiler tutting over trivialities. You need a language that does the obvious thing, or at least tries — a language that helps you whisper instructions to silicon with as little fuss as possible. The computer is pedantic by nature; the language should be your accomplice in rebellion.</p>

<h3>There's More Than One Way To Do It, But Some Ways Are More Equal Than Others: A Philosophy of Freedom and Consequences</h3>

<p>Some people think big headings are scary.  But not me.  If a section doesn't have an abstract, then a big heading can be helpful.  For example, surrealist Glen Baxter's comic novel autobiography <a href="https://www.amazon.com.au/Glen-Baxter-His-Life-Struggle/dp/0394533119">Glen Baxter, His Life: The Years of Struggle</a><ref
  title="Glen Baxter, His Life: The Years of Struggle"
  publishinglocation="Hungary"
  publishinghouse="Thames and Hudson"
  publishingdate="1983"
><authors>Glen Baxter</authors></ref> cites a variety of publications (around 108) in his bibloigraphy (all of whose authors have the surname Baxter), but the one that always caught my eye was Richard Baxter's <i>Richard Baxter's Account of his Present Thoughts concerning the controversies about the perseverance of the Saints.  Occasioned by the gross misreports of some passages in his book, called The Right Method for peace of conscience and which are left out in the last impression to avoid offence</i>.  I don't even need to read his account now, though I might someday when I have time to gain a better understanding of Puritan thought.  The long title <i>does</i> make the Table-of-Contents sidebar a little crowded though</p>

<p>Anyway, back to the topic.  </p>

<div class="parallel-quote">
<blockquote>
<div class="quote-header">Perl</div>
There's More Than One Way To Do It<ref
  href="https://linux.die.net/man/1/perl"
  title="man perl"
><authors>Larry Wall</authors></ref>
<div class="reference">Larry Wall</div>
</blockquote>
<blockquote>
<div class="quote-header">Raku</div>
There's More Than One Way To Do It<br/>
But Some Ways Are More Equal Than Others.<ref label="Conway,2020"/>
<div class="reference">Damian Conway</div>
</blockquote>
</div>

<h4>TMTOWTDI (There's More Than One Way To Do It) -- Freedom</h4>

<p>The Perl saying is so widely used in the community that it has its own acronym: TMTOWTDI (pronounced "tim-toady").  This proverb is one of the things that contributes to making the easy things easy -- if you can think of a way to do it, then something like that is probably possible.</p>

<p>Some languages don't subscribe to this philosophy.  Python, for example, has the principles "There should be one -- and preferably only one -- obvious way to do it", followed by "Although that way may not be obvious at first unless you're Dutch"<ref
  href="https://en.wikipedia.org/wiki/Zen_of_Python"
  title="Zen of Python"
  publishingdate="June 4th, 1999"
><authors>Tim Peters</authors></ref>.  So for anyone who isn't Dutch, Raku aligns better with your thinking.  And if you <i>are</i> Dutch, then all I'll say is that a number of the most prominent people in the Raku community are also Dutch, so Python's thinking doesn't even suit all Dutch people.  </p>

<p>Many languages that don't intentionally subscribe to the "One True Path" philosphy often subscribe to it in practice -- once something can be done, then there's no need to add another way to do it.  </p>

<p>Even if you agree with the statement "There should be one -- and preferably only one -- obvious way to do it", if the way that you think it should be done isn't the way chosen by the designers of Python (or various other languages), then you're out of luck.  If you want to do it <i>your</i> way, you'll need to use a more flexible language like Raku.  </p>

<blockquote>
True greatness is measured by how much freedom you give to others, not by how much you can coerce others to do what you want<ref label="Wall,1999"/>.  
<div class="reference">Larry Wall</div>
</blockquote>

<h4>SWAMETO: (Some Ways Are More Equal Than Others) -- Consequences</h4>

<p>While we're doing acronyms for proverbs, let me coin SWAMETO (pronounced Swam-To, as in "Tim toady swam to the shore", except without "the shore").  </p>

<p>Some may have so deeply imbibed TMTOWTDI (There's More Than One Way To Do It) that they struggle with the second part of Damian's statement.  I thought it might help to cite some thought support directly from Larry.  </p>

<p>First the proof:</p>

<blockquote>
<i>TMTOWTDI</i>: There's More Than One Way To Do It, the Perl Motto.  The notion that there can be more than one valid path to solving a programming problem in context.  (This doesn't mean that more ways are always better of that all possible paths are equally desirable -- just that there need not be One True Way.)<ref
  label="Wall,2000"
  pages="1095"
  comments="The glossary entry for TMTOWTDI."
></ref>
<div class="reference">Larry Wall</div>
</blockquote>

<p>Next, the philosophical backing:</p>

<blockquote>
While I despise the Modern Cult of Objectivity, I also despise the quasi-postmodern Cult of Subjectivity. I call it absolute cultural relativism. It's the notion that everything is as good as everything else, because goodness is only a matter of opinion. It's like claiming that the only thing you can know absolutely is that you can't know anything absolutely. I think this is really just another form of Modernism, a kind of existentialism really, though unfortunately it's come to be associated with postmodernism. But I think it sucks<ref label="Wall,1999"/>. 
<div class="reference">Larry Wall</div>
</blockquote>

<p>The important thing here is that, in language design, it's still necessary to choose between the good and the bad, if for no other reason than Larry’s First Law of Language Redesign: Everyone wants the colon<ref
  href="https://www.perl.com/pub/2001/04/02/wall.html/"
  title="Apocalypse 1: The Ugly, the Bad, and the Good"
  publishingdate="April 2nd, 2001"
><authors>Larry Wall</authors></ref>, and we have to choose who gets it.  Or at least, according to Larry's Second Law of Language Design, "Larry gets the colon for whatever he wants"<ref label="Wall,2006"/> (ie. he chose, not us).  </p>

<h2>Hard things should be easy</h2>
<div class="parallel-quote">
<blockquote>
<div class="quote-header">Perl</div>
Perl is the Swiss Army Chainsaw of Unix.  
<div class="reference">Henry Spencer<footnote>Henry Spencer, the creator of the original regex library, was paraphrasing the saying that <code>lex</code> was "the Swiss-army knife of Unix programming"</footnote></div>
</blockquote>

<blockquote>
<div class="quote-header">Raku</div>
[Raku is] more like a Swiss army machine shop. It really gives you a lot of tools, some of which are dangerous, but it lets you get your job done very quickly.<ref
  href="https://bigthink.com/videos/big-think-interview-with-larry-wall/"
  title="Big Think Interview With Larry Wall"
  publishingdate="August 8, 2010"
>Larry Wall</ref>
<div class="reference">Larry Wall</div>
</blockquote>
</div>
<p>This is where the fact that Raku is a Swiss Army Machine Shop comes to the fore.  Because the language has so many capabilities, the hard things become easy.  </p>

<p>Not because the universe is easy — it isn’t — but because your language should hand you the right wrench when you’re elbow-deep in the gears. Raku doesn’t hide the fact that programming is occasionally hard labour; it simply stocks the toolbox so well that the big jobs don’t feel like chiselling granite with a spoon. Need a parser for your new markup dialect? Grammar rules are built-in — no begging some third-party library to almost fit your needs. Need threads, promises, supply chains of events? They’re right there in the crate next to the regexes and custom operators.</p>

<p><i>Raku is a Swiss army machine shop</i>. Not just a penknife with illusions of grandeur, nor even a chainsaw, but a whole bench of sturdy, dangerous tools. Dangerous, because real power always is — but designed so you can wield it without losing a finger every time. The point is not to coddle you, but to back you up when your problem veers off the safe, sunny path. A language that makes the hard easy is not promising you a free lunch — it’s promising you the right tools for the job, no matter how oddly shaped that job turns out to be.</p>

<h2>Impossible things should be merely hard</h2>

<p>This is where Raku really parts company with languages that prevent you from thinking the unthinkable.  Plenty of tools help you solve today’s problems — Raku quietly hands you a blowtorch and says, “Now, what did you have in mind for tomorrow?” In most languages, you can do little to redefine the language other than new functions, vaariables, and, if you're lucky, operator overloading.  In Raku, you can do all of these, but can also <a href="https://raku.land/zef:tony-o/Slang::SQL">define</a> <a href="https://raku.land/zef:elcaro/Slang::Otherwise">custom</a> <a href="https://raku.land/zef:witawayar/Slang::Forgiven">slangs</a>, redefine how classes behave with <a href="https://docs.raku.org/language/mop">the Meta-object protocol</a>, and write your own DSLs inside your Raku program.  These are not things you can do in most other languages.  But because of SWAMETO, we require monkey-typing declarations for some of the particularly dangerous things (like EVAL).  </p>

<p>When you run into a wall that other languages politely forbid you to climb, Raku just shrugs and passes you the rope. Want to invent new operators? Go on. Want to mutate the grammar itself to suit your domain? You can. The impossible is just work — and the work is possible because the language never locks the door.</p>

<p>Raku inherits that rebellious spirit of "make the hard things possible", and doubles down with "Impossible things should be merely hard". It trusts the programmer to do weird, wonderful, slightly dangerous things when the problem demands it. Sure, you might not need to write a new mini-language inside your program today — but when you do, you’ll discover it’s merely hard, not hopeless. The language has your back, even when you’re charting new territory the original designers couldn’t imagine. That’s what a Swiss army machine shop is for -- the day you need to change the tool that builds the tool.</p>

<h1>How?  Servant Leadership</h1>

<p>It's appropriate that a language with the motto TMTOWTDI (SWAMETO) has more than one way to answer the question "How?".  </p>

<p>Raku is the story of how a servant leader (Larry Wall) who served The Servant Leader (Jesus) created a servant leader (Raku).  </p>

<bible-blockquote reference="Mark 9:33-35" url-reference="Mark%209" author="Mark the Evangelist">
  <blockquote class="tabcontent traditional" version-id="AKJV">
<versestart num="33"/>[Jesus] asked [the disciples], What was it that ye disputed among yourselves by the way?  <versestart num="34"/>But they held their peace: for by the way they had disputed among themselves, who should be the greatest.  <versestart num="35"/>And he sat down, and called the twelve, and saith unto them, "If any man desire to be first, the same shall be last of all, and servant of all".
  </blockquote>
  <blockquote class="tabcontent contemporary" version-id="CEV">
    <p><versestart num="33"/>Jesus asked [the disciples], “What were you arguing about along the way?”  <versestart num="34"/>They had been arguing about which one of them was the greatest, and so they did not answer.</p>

<p><versestart num="35"/>After Jesus sat down and told the twelve disciples to gather around him, he said, “If you want the place of honor, you must become a slave and serve others!”</p>
  </blockquote>
</bible-blockquote>

<blockquote>
I have to be honest here. I'm with Linus--I personally want to take over the world. I want to take over the world because I'm an egomaniac. A nice sort of egomaniac, an egomaniac moderated by belief in the value of humility, but an egomaniac nonetheless<ref label="Wall,1999"/>.
<div class="reference">Larry Wall</div>
</blockquote>

<p>Despite Larry's protestations, he was a servant leader who followed the Servant Leader.  His original plan was to go to the mission field, following in the footsteps of his master, but his master had other plans, and sent him to make Raku for us.  </p>

<p>Why is this relevant?  Because it gives us an insight into...</p>

<h2>How is Raku a Servant Leader?</h2>

<blockquote>
[Raku] was my servant before it was anyone else's, so I taught [Raku] to be a better servant than I could ever teach myself to be. [Raku] is like the perfect butler. Whatever you ask [Raku] to do, it says ``Very good, sir,'' or ``Very good, madam.'' Only occasionally does [Raku] give you a stiff upper lip, or say ``Tsk, tsk.'' <ref label="Wall,1999"/>
<div class="reference">Larry Wall</div>
</blockquote>

<p>...and that's how we like Raku.  Serving us as well as possible.  </p>

<p>"...but wait", you may say, "That explains the servant part, but what about the leader part?"  Glad you asked.  </p>

<blockquote>
<p>I fully expect that Raku will be as influential a language as Perl was before it.</p>

<p>---</p>

<p>JavaScript has a `"use strict"` mode, that was copied from Perl5.</p>

<p>PowerShell has a `$_` variable that was copied from Perl.</p>

<p>Every language that has a regular expression engine that it comes with has Perl to thank/blame.</p>

<p>---</p>

<p>Raku has a fair few neat ideas that it would be a shame if no one copied them into other languages.<ref
  href="https://news.ycombinator.com/item?id=23230028"
  publishingdate="May 19th, 2020"
><authors>b2gills</authors></ref></p>
<div class="reference">b2gills</div>
</blockquote>

<p>Perl was a leader in the the programming world because of its whipuptitude<footnote>"While shell was good at something else which I call whipuptitude, the aptitude for whipping things up".<ref label="Wall,2006"/></footnote>, and we should fully expect Raku to be as well.  </p>

<h3>How does a Servant Leader Language Maximise Creativity?</h3>

<p>This maximises creativity because it minimises the time from idea to functioning program.  This means that it's easier to create, because we can do it more quickly.  By making you the master craftsman at your own bench, not a prisoner chained to someone else’s design. Raku holds the door, brings the tools, wipes the spanners, and never lectures you about what should be impossible.  </p>

<h1>Measuring Success</h1>

<p>How do we measure success?  Larry answered that as well:</p>

<blockquote>
I'm measuring success here not so much in terms of numbers of users, but in terms of satisfaction of users. <ref label="Wall,1999"/>
<div class="reference">Larry Wall</div>
</blockquote>

<p>...HOWEVER!  When Larry said that, Perl was probably the most popular scripting language on the planet.  Raku is not in that enviable position ... and that makes me dissatisfied 🙂.  Mainly I'm dissatisfied because the Raku ecosystem, despite its beauties, doesn't have the scope that those of larger langauges do, and we need more developers to get to that point.  We often discuss the lack of manpower, and <a href="http://localhost:8000/blog/raku/ReachingOut/Pathways-of-Entry.xml">more people</a> is the only solution to that.  </p>

<p>In short, we no longer have the luxury of measuring only satisfaction; we must also measure numbers.  </p>

<h2>Optimised for Fun</h2>

<blockquote>
Raku is optimised for Fun
<div class="reference">Audrey Tang</div>
</blockquote>

<p>Audrey Tang's saying, above, is often quoted.  And it's true, though I only realise that when I try to program in languages that aren't in the Perl family.  I have a tendency to feel like Perl and Raku are normal (or even bash, which at least has a useful amount of whipuptitude), and only remember how slow other languages are when I have to use them.  We should use this to do a better job of advocating for Raku.  Raku is not the norm, it's at least a few more steps towards the promised land than the norm is, and we should get that information out there, so that others can enjoy what we enjoy (although each in their own way, as Raku allows).  </p>

<p>Fun isn’t frivolous — fun is momentum. A fun tool shortens the distance from idea to running code.  It’s easy to forget this until you wander back to languages that greet your bright idea with a shrug and a wall of boilerplate.</p>

<p>Raku is optimised for fun because fun unleashes the weird ideas that become tomorrow’s tools. It makes creativity faster, cheaper, sillier, more probable. That’s no small feat — that’s freedom humming under your fingertips.</p>

</content>
</page>
